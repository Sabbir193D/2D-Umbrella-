#include <GL/glut.h>
#include <cmath>

void drawSemiCircle(float cx, float cy, float radius, int segments) {
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(cx, cy);
    for (int i = 0; i <= segments; i++) {
        float theta = M_PI * i / segments;
        float x = cx + radius * cos(theta);
        float y = cy + radius * sin(theta);
        glVertex2f(x, y);
    }
    glEnd();
}

// Function to draw a smooth J-shaped handle
void drawHandle(float cx, float cy, float r) {
    glColor3f(0.6f, 0.3f, 0.1f); // Same brown color for handle
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i <= 20; i++) {
        float theta = -M_PI / 10 + (M_PI / 20) * i; // Quarter-circle
        float x = r * cos(theta);
        float y = -r * sin(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();

}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(1.0f, 1.0f, 0.0f);
    drawSemiCircle(0.0f, 0.4f, 0.5f, 50);

    glColor3f(1.0f, 1.0f, 0.0f);

  glBegin(GL_TRIANGLES);
    float startX = -0.50f;
    float step = 0.1f;
    for (int i = 0; i < 10; i++) {
        glVertex2f(startX, 0.4f);
        glVertex2f(startX + step / 2, 0.35f);
        glVertex2f(startX + step, 0.4f);
        startX += step;
    }
    glEnd();

    glColor3f(0.6f, 0.3f, 0.1f);
    glLineWidth(6);
    glBegin(GL_LINES);
        glVertex2f(0.0f, -0.6f);
        glVertex2f(0.0f, 0.6f);
    glEnd();
    glLineWidth(6);
    drawHandle(-0.08f, -0.6f, 0.08f);

    glFlush();
}

void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("2D Umbrella");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
